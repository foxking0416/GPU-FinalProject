var CRAYON = { Shaders:{"pass-vs":"// pass through vertex shader (RGB)\n\t\t\t\nvoid main()\t{\n\n\tgl_Position = vec4( position, 1.0 );\n\n}","pass-fs":"// pass through fragment shader\n\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvoid main()\t{\n\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\n\tvec3 color = texture2D( texture, uv ).xyz;\n\n\tgl_FragColor = vec4(color, 1.0);\n\n}\n"}}
/*! crayon.js 26-05-2014 */
function generateShaders(e){e=e||9;for(var t=calc(e),r=t.linear_weights,i=t.linear_offsets,n=["uniform float h;","uniform float v;","varying vec2 vBlurCoords[%d];","void main() {","vec2 uv3 = uv;","vec2 offset = vec2(h, v);","%s","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),s=["uniform sampler2D tDiffuse;","varying vec2 vBlurCoords[%d];","void main() {","vec4 sum = vec4( 0.0 );","%s","gl_FragColor = sum;","}"].join("\n"),a=2*r.length-1,d=[],u=[],l=0;a>l;l++)o=l-r.length+1,0>o?(d.push("vBlurCoords["+l+"] = uv3 - offset * "+toFloat(i[-o])+";"),u.push("sum += texture2D( tDiffuse, vBlurCoords["+l+"] ) * "+toFloat(r[-o])+";")):(d.push("vBlurCoords["+l+"] = uv3 + offset * "+toFloat(i[o])+";"),u.push("sum += texture2D( tDiffuse, vBlurCoords["+l+"] ) * "+toFloat(r[o])+";"));return n=n.replace(/%d/,a).replace(/%s/,d.join("\n")),s=s.replace(/%d/,a).replace(/%s/,u.join("\n")),{vertexShader:n,fragmentShader:s}}function toFloat(e){return 0===e%1?e.toFixed(1):e}function calc(e){if(1!=e%2)return console.log("odd number taps only "),void 0;for(var t=binomial(e),r=0,i=0;t.length>i;i++)r+=t[i];var n=[],o=[],s=t.length/2+.5;for(i=s-1;i>=0;i--)n.push(t[i]/r),o.push(Math.abs(i+1-s));for(var a=[n[0]],d=[o[0]],u=1;n.length>u;u+=2){var l=u+1;a.push(n[u]+n[l]),d.push((o[u]*n[u]+o[l]*n[l])/a[a.length-1])}return{weights:n,offsets:o,linear_weights:a,linear_offsets:d}}function binomial(e){for(var t=[1],r=1;e>r;r++){for(var i=[1],n=0;t.length-1>n;n++)i.push(t[n]+t[n+1]);i.push(1),t=i}return t}window.CRAYON||(CRAYON={}),CRAYON.extends=function(e,t,r){var i=r.init;i.prototype=Object.create(t.prototype),i.prototype.name=e,i.prototype.super=t.prototype;for(var n in r)"init"!=n&&(i.prototype[n]=r[n]);this[e]=i};var width=innerWidth,height=innerHeight;CRAYON.extends("Node",Object,{init:function(){this.inputs=new CRAYON.InputConnector(this),this.outputs=[]},render:function(){console.warn("Please extend "+this.name+".render()")},connect:function(e,t){e.inputs.link(this,t)}}),CRAYON.extends("ShaderNode",CRAYON.Node,{init:function(){var e,t={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1};e=new THREE.WebGLRenderTarget(width,height,t),this.renderTarget=e,CRAYON.Node.call(this)},setSize:function(e,t){var r=this.renderTarget.clone();r.width=e,r.height=t,this.renderTarget=r}}),CRAYON.extends("PostProcessNode",CRAYON.ShaderNode,{init:function(e,t){CRAYON.ShaderNode.call(this),this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1e4),this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null),this.scene=new THREE.Scene,this.scene.add(this.quad),this.renderer=e,this.material=t,this.quad.material=t},render:function(){this.renderer.render(this.scene,this.camera,this.renderTarget)}}),CRAYON.extends("InputConnector",Object,{init:function(e){this.requirements=[],this.connectedFrom={},this.node=e},requires:function(){this.requirements=Array.prototype.slice.call(arguments)},link:function(e,t){t||1==this.requirements.length&&(t=this.requirements[0]),this.connectedFrom[t]=e,this.node instanceof CRAYON.ExecutorNode||(this.node instanceof CRAYON.PostProcessNode?t in this.node.material.uniforms?this.node.material.uniforms[t].value=e.renderTarget:console.log("No uniform found"+t):console.log("Not linking textures",e.name,t))},list:function(){console.log(this.requirements)},getDependencies:function(e){e||(e=[]);var t,r,i=this.requirements;if(e.indexOf(this.node)>-1)return console.log("getDependencies already ran"),e;if(this.node instanceof CRAYON.ExecutorNode)for(t in this.connectedFrom)r=this.connectedFrom[t],r?-1==e.indexOf(r)&&r.inputs.getDependencies(e):this.node instanceof CRAYON.ExecutorNode||console.warn(this.node.name+' has missing Input Node ["'+t+'"]');else for(var n=0;i.length>n;n++)t=i[n],r=this.connectedFrom[t],r?-1==e.indexOf(r)&&r.inputs.getDependencies(e):this.node instanceof CRAYON.ExecutorNode||console.warn(this.node.name+' has missing Input Node ["'+t+'"]');return e.push(this.node),e}}),CRAYON.extends("ExecutorNode",CRAYON.ShaderNode,{init:function(e){CRAYON.ShaderNode.call(this,e),this.inputs.requires("texture")},render:function(){},renderAll:function(){this.nodesToRender||(this.nodesToRender=this.inputs.getDependencies(),console.log("Lists of nodes to render"),this.nodesToRender.forEach(function(e){console.log(e.name)}));var e=this.nodesToRender;1==e.length&&console.warn("ExecutorNode has nothing to execute");for(var t=0;e.length>t;t++){var r=e[t];r.render()}}}),CRAYON.extends("RenderToScreenNode",CRAYON.PostProcessNode,{init:function(e){var t=new THREE.ShaderMaterial({uniforms:{texture:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(width,height)}},attributes:{},vertexShader:getShaderCode("pass-vs"),fragmentShader:getShaderCode("pass-fs")});CRAYON.PostProcessNode.call(this,e,t),this.inputs.requires("texture")},render:function(){this.renderer.render(this.scene,this.camera)}}),generateShaders(),CRAYON.extends("BlurNode",CRAYON.PostProcessNode,{init:function(e,t,r){var i=generateShaders(9);i.uniforms=THREE.UniformsUtils.clone(THREE.BlurShader.uniforms);var n=new THREE.ShaderMaterial(i);i=generateShaders(9),i.uniforms=THREE.UniformsUtils.clone(THREE.BlurShader.uniforms);var o=new THREE.ShaderMaterial(i);CRAYON.PostProcessNode.call(this,e,n);var s=r||1;this.repeats=t||1;var a=width/s,d=height/s;this.renderTarget.width=a,this.renderTarget.height=d,this.renderTarget2=this.renderTarget.clone(),n.uniforms.v.value=1/d,n.uniforms.h.value=0,o.uniforms.v.value=0,o.uniforms.h.value=1/a,this.vShaderMaterial=n,this.hShaderMaterial=o,o.uniforms.tDiffuse.value=this.renderTarget2,this.inputs.requires("tDiffuse")},render:function(){for(var e=this.material.uniforms.tDiffuse.value,t=0;this.repeats>t;t++)this.quad.material=this.vShaderMaterial,this.renderer.render(this.scene,this.camera,this.renderTarget2),this.quad.material=this.hShaderMaterial,this.renderer.render(this.scene,this.camera,this.renderTarget),this.vShaderMaterial.uniforms.tDiffuse.value=this.renderTarget;this.material.uniforms.tDiffuse.value=e}}),THREE.BlurShader={uniforms:{tDiffuse:{type:"t",value:null},h:{type:"f",value:1/512},v:{type:"f",value:1/512}},vertexShader:["uniform float h;","uniform float v;","varying vec2 vBlurCoords[5];","void main() {","vec2 uv3 = uv;","vec2 offset = vec2(h, v);","vBlurCoords[0] = uv3 + offset * -3.2307692308;","vBlurCoords[1] = uv3 + offset * -1.3846153846;","vBlurCoords[2] = uv3 ;","vBlurCoords[3] = uv3 + offset * 1.3846153846;","vBlurCoords[4] = uv3 + offset * 3.2307692308;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","varying vec2 vBlurCoords[5];","void main() {","vec4 sum = vec4( 0.0 );","sum += texture2D( tDiffuse, vBlurCoords[0] ) * 0.0702702703;","sum += texture2D( tDiffuse, vBlurCoords[1] ) * 0.3162162162;","sum += texture2D( tDiffuse, vBlurCoords[2] ) * 0.227027027;","sum += texture2D( tDiffuse, vBlurCoords[3] ) * 0.3162162162;","sum += texture2D( tDiffuse, vBlurCoords[4] ) * 0.0702702703;","gl_FragColor = sum;","}"].join("\n")},CRAYON.extends("ParticleRendererNode",CRAYON.PostProcessNode,{init:function(e,t){var r={size:{type:"f",value:null}};t=t||"textures/circle.png";var i=THREE.ImageUtils.loadTexture(t),n={time:{type:"f",value:1},brush:{type:"t",value:i},texture:{type:"t",value:null},color:{type:"t",value:null}};this.uniforms=n;var o=new THREE.ShaderMaterial({uniforms:n,attributes:r,vertexShader:document.getElementById("particle-brush-vs").textContent,fragmentShader:document.getElementById("particle-brush-fs").textContent,blending:THREE.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0});CRAYON.PostProcessNode.call(this,e,o),this.scene.remove(this.quad);var s=5e5,a=new THREE.BufferGeometry;a.addAttribute("position",new THREE.Float32Attribute(s,3)),a.addAttribute("size",new THREE.Float32Attribute(s,1));for(var d=a.attributes.position.array,u=a.attributes.size.array,l=0;d.length>l;l+=3){var h=2*Math.random()-1,f=2*Math.random()-1;d[l]=h,d[l+1]=f,d[l+2]=0,u[l]=width/1e3*(2*Math.random()+2)}a.computeBoundingSphere();var c=new THREE.ParticleSystem(a,o);this.scene.add(c),this.inputs.requires("texture")},render:function(){this.uniforms.time.value=performance.now(),CRAYON.PostProcessNode.prototype.render.call(this)}}),THREE.EdgeShader2={uniforms:{texture:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D texture;","varying vec2 vUv;","uniform vec2 resolution;","vec2 texel = vec2(1.0 / resolution.x, 1.0 / resolution.y);","mat3 G[2];","const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );","const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );","void main(void)","{","mat3 I;","float cnv[2];","vec3 sample;","G[0] = g0;","G[1] = g1;","for (float i=0.0; i<3.0; i++)","for (float j=0.0; j<3.0; j++) {","sample = texture2D( texture, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;","I[int(i)][int(j)] = length(sample);","}","for (int i=0; i<2; i++) {","float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);","cnv[i] = dp3 * dp3; ","}","gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));","} "].join("\n")},CRAYON.extends("EdgeFilterNode",CRAYON.PostProcessNode,{init:function(){var e=new THREE.ShaderMaterial(THREE.EdgeShader2);e.uniforms.resolution.value.set(width/2,height/2),CRAYON.PostProcessNode.call(this,renderer,e),this.renderTarget.width=width/2,this.renderTarget.height=height/2,this.inputs.requires("texture")}}),THREE.MultiplyNode={uniforms:{texture1:{type:"t",value:null},texture2:{type:"t",value:null},texture3:{type:"t",value:null},time:{type:"f",value:0},resolution:{type:"v2",value:new THREE.Vector2(512,512)}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D texture1;","uniform sampler2D texture2;","uniform sampler2D texture3;","varying vec2 vUv;","uniform vec2 resolution;","uniform float time;","float hash( float n ) { return fract(sin(n)*43758.5453123); }","float noise( in vec3 x )","{","vec3 p = floor(x);","vec3 f = fract(x);","f = f*f*(3.0-2.0*f);","float n = p.x + p.y*157.0 + 113.0*p.z;","return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),","mix( hash(n+157.0), hash(n+158.0),f.x),f.y),","mix(mix( hash(n+113.0), hash(n+114.0),f.x),","mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);","}","float fbm(vec3 mo) {","float v = 0.;","float m = 1.;","for (int i=0; i < 3; i ++) {","m *= 0.45;","v += noise(mo) * m;","mo *= 1.23;","}","return v;","}","float pallet(vec3 s) {","float f = fbm(s);","if (f > 0.8) f = 1.;","else if (f > 0.6) f = .8;","else if (f > 0.4) f = .6;","else if (f > 0.2) f = .4;","else if (f > 0.0) f = .2;","else f = 0.;","return f;","}","float texture(float time2, vec2 uv) {","float f = pallet(vec3(uv * 8., time2 * 0.2 )); ","f += pallet(vec3(uv * 8., time2 * 0.2 + 4.2));","//f *= pallet(vec3(uv * 8., time2 * 0.2 + 2.2));","//f = hash(uv.x + time * 0.00001) + hash(uv.y);","float g = hash(uv.x  * 2. + uv.y * (resolution.x * 4. ));","f = (f + g ) * 1.;","return f;","}","void main(void)","{","vec3 c1 = texture2D( texture1, vUv ).rgb;","vec3 c2 = texture2D( texture2, vUv ).rgb;","vec3 c3 = texture2D( texture3, vUv ).rgb;","c3 += (vUv.y) * .25;","gl_FragColor = vec4((c1 - abs(c2 - c1)) * c3, 1.0);","} "].join("\n")},CRAYON.extends("MultiplyNode",CRAYON.PostProcessNode,{init:function(){var e=new THREE.ShaderMaterial(THREE.MultiplyNode);e.uniforms.resolution.value.set(width,height),CRAYON.PostProcessNode.call(this,renderer,e),this.inputs.requires("texture1","texture2")}}),CRAYON.extends("SceneDepthNode",CRAYON.ShaderNode,{init:function(e){CRAYON.ShaderNode.call(this),this.sceneNode=e,this.material_depth=new THREE.MeshDepthMaterial({morphTargets:!0}),this.inputs.requires("texture")},render:function(){scene.overrideMaterial=this.material_depth,renderer.render(scene,camera,this.renderTarget),scene.overrideMaterial=null}}),CRAYON.extends("GradientEncoderNode",CRAYON.PostProcessNode,{init:function(e,t){var r=new THREE.ShaderMaterial({uniforms:{texture:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(width,height)},top:{type:"f",value:t}},attributes:{},vertexShader:getShaderCode("pass-vs"),fragmentShader:getShaderCode("fsGradientEncode")});CRAYON.PostProcessNode.call(this,renderer,r),this.inputs.requires("texture");var i={wrapS:THREE.RepeatWrapping,wrapT:THREE.RepeatWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,type:THREE.FloatType,format:THREE.RGBAFormat,stencilBuffer:!1};renderTarget=new THREE.WebGLRenderTarget(width,height,i),this.encodedRenderTarget=renderTarget,this.pixels=new Uint8Array(4*width*height),this.pixels32=new Float32Array(this.pixels.buffer),this.renderTarget=e.renderTarget},render:function(){console.log("float!!!"),this.renderer.render(this.scene,this.camera,this.encodedRenderTarget);var e=renderer.getContext();e.readPixels(0,0,width,height,e.RGBA,e.UNSIGNED_BYTE,this.pixels)}}),CRAYON.extends("FloatEncoderNode",CRAYON.PostProcessNode,{init:function(e){var t=new THREE.ShaderMaterial({uniforms:{texture:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2(width,height)}},attributes:{},vertexShader:getShaderCode("pass-vs"),fragmentShader:getShaderCode("fsEncodeFloatX")});CRAYON.PostProcessNode.call(this,renderer,t),this.inputs.requires("texture");var r={wrapS:THREE.RepeatWrapping,wrapT:THREE.RepeatWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,type:THREE.FloatType,format:THREE.RGBAFormat,stencilBuffer:!1};renderTarget=new THREE.WebGLRenderTarget(width,height,r),this.encodedRenderTarget=renderTarget,this.pixels=new Uint8Array(4*width*height),this.pixels32=new Float32Array(this.pixels.buffer),this.renderTarget=e.renderTarget,this.renderTarget=this.encodedRenderTarget},render:function(){this.renderer.render(this.scene,this.camera,this.encodedRenderTarget);var e=renderer.getContext();e.readPixels(0,0,width,height,e.RGBA,e.UNSIGNED_BYTE,this.pixels)}});